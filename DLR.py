#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Dec 11 13:30:01 2020

@author: student
"""
import geopandas as gpd
from feedinlib import era5
import pandas as pd
import numpy as np

#Specify the paths of the input data: weather from ERA5 and shapefile of the analyzed regions
era5_netcdf_filename = '/home/student/Documents/Task_02-Weather Data Processing/Germany_Weather_2011.nc'
path_shape = "/home/student/Documents/Task_01-GIS/Germany borders/gadm36_DEU_0.shp"

#load shapefile with the 9 regions defined by NEP 2020
regions = gpd.read_file(path_shape)

#Create data frame to save results(Min wind speed, max temperature and %DLR per region along 8760h in a year)
time = np.arange('2010-12-31T23', '2011-12-31T23', dtype='datetime64')
time = time.transpose()
dlr = pd.DataFrame(0, columns= ['R1-Wind_min', 'R1-Temp_max','R1-DLR',
                                'R2-Wind_min', 'R2-Temp_max','R2-DLR',
                                'R3-Wind_min', 'R3-Temp_max','R3-DLR',
                                'R4-Wind_min', 'R4-Temp_max','R4-DLR',
                                'R5-Wind_min', 'R5-Temp_max','R5-DLR',
                                'R6-Wind_min', 'R6-Temp_max','R6-DLR',
                                'R7-Wind_min', 'R7-Temp_max','R7-DLR',
                                'R8-Wind_min', 'R8-Temp_max','R8-DLR',
                                'R9-Wind_min', 'R9-Temp_max','R9-DLR'],
                                 index = time)

#Mask weather information for each region defined by NEP 2020
for i in range(0, len(regions)):
    region_df = pd.DataFrame(regions.loc[i]).transpose()
    region_df.crs = regions.crs
    region_poly = region_df.iat[0, 2]
    weather_region = era5.weather_df_from_era5(
        era5_netcdf_filename=era5_netcdf_filename,
        lib='windpowerlib',
        area= region_poly)
#Calculate and save min wind speed and max temperature in a dataframe.
#Since the dataframe generated by the function era5.weather_df_from_era5() is sorted by date,
#it is faster to calculate the hourly results using blocks of data defined by "step", instead of
#using a filter or a search function.
    for j in range(0, len(time)):
        step = len(weather_region)/8760
        low_limit = int(j * step)
        up_limit = int(step*(j + 1))
        dlr.iloc[j,0+i*3] = min(weather_region.iloc[low_limit:up_limit, 0])
        dlr.iloc[j,1+i*3] = max(weather_region.iloc[low_limit:up_limit, 3])-273.15

#The next loop use the min wind speed and max temperature calculated previously to
#define the hourly DLR in for each region based on the table given by NEP 2020 pag 31
for i in range(0, len(regions)):
    for j in range(0, len(time)):
        if dlr.iloc[j,1+i*3] <= 5:
            if dlr.iloc[j,0+i*3] < 3:
                dlr.iloc[j,2+i*3] = 130
            elif dlr.iloc[j,0+i*3] < 4:
                dlr.iloc[j,2+i*3] = 135
            elif dlr.iloc[j,0+i*3] < 5:
                dlr.iloc[j,2+i*3] = 145
            else:
                dlr.iloc[j,2+i*3] = 150
        elif dlr.iloc[j,1+i*3] <= 15:
            if dlr.iloc[j,0+i*3] < 3:
                dlr.iloc[j,2+i*3] = 120
            elif dlr.iloc[j,0+i*3] < 4:
                dlr.iloc[j,2+i*3] = 125
            elif dlr.iloc[j,0+i*3] < 5:
                dlr.iloc[j,2+i*3] = 135
            elif dlr.iloc[j,0+i*3] < 6:
                dlr.iloc[j,2+i*3] = 145
            else:
                dlr.iloc[j,2+i*3] = 150
        elif dlr.iloc[j,1+i*3] <= 25:
            if dlr.iloc[j,0+i*3] < 3:
                dlr.iloc[j,2+i*3] = 110
            elif dlr.iloc[j,0+i*3] < 4:
                dlr.iloc[j,2+i*3] = 115
            elif dlr.iloc[j,0+i*3] < 5:
                dlr.iloc[j,2+i*3] = 120
            elif dlr.iloc[j,0+i*3] < 6:
                dlr.iloc[j,2+i*3] = 130
            else:
                dlr.iloc[j,2+i*3] = 140
        elif dlr.iloc[j,1+i*3] <= 35:
            if dlr.iloc[j,0+i*3] < 3:
                dlr.iloc[j,2+i*3] = 100
            elif dlr.iloc[j,0+i*3] < 4:
                dlr.iloc[j,2+i*3] = 105
            elif dlr.iloc[j,0+i*3] < 5:
                dlr.iloc[j,2+i*3] = 110
            elif dlr.iloc[j,0+i*3] < 6:
                dlr.iloc[j,2+i*3] = 115
            else:
                dlr.iloc[j,2+i*3] = 125
        else:
            dlr.iloc[j,2+i*3] = 100
